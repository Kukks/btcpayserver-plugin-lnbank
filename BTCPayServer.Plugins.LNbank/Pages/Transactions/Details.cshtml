@page "/plugins/lnbank/wallets/{walletId}/transactions/details/{transactionId}"
@inject BTCPayServer.Abstractions.Services.Safe Safe
@using BTCPayServer.Plugins.LNbank.Authentication
@using BTCPayServer.Abstractions.Models
@model BTCPayServer.Plugins.LNbank.Pages.Transactions.DetailsModel

@{
    ViewData.SetActivePage(LNbankNavPages.Wallet, Model.Transaction.Description, Model.CurrentWallet.WalletId);
    var publicShareUrl = Url.PageLink("/Transactions/Share", null, new { transactionId = Model.Transaction.TransactionId });
}

<partial name="_WalletHeader" model="Model.CurrentWallet"/>
<partial name="_StatusMessage"/>

<h2 id="LNbank-TransactionTitle">
    @ViewData["Title"]
    @if (Model.Transaction.IsSoftDeleted)
    {
        <span class="text-danger">(Deleted)</span>
    }
</h2>
@if (Model.Transaction.IsPaid || Model.Transaction.IsSettled)
{
    <h3 id="LNbank-TransactionSettled" class="text-@(Model.Transaction.AmountSettled > 0 ? "success" : "danger")">
        <span data-sensitive>@Helpers.Sats(Model.Transaction.AmountSettled)</span>
        @Model.Transaction.Status
    </h3>
    <h4 class="h4 text-muted">
        @if (Model.Transaction.IsSettled)
        {
            <span>
                Paid
                @Model.Transaction.PaidAt?.ToBrowserDate(ViewsRazor.DateDisplayFormat.Relative)
            </span>
        }
        else
        {
            <span>Awaiting confirmation</span>
        }
    </h4>
}
else
{
    <h3 id="LNbank-TransactionAmount" class="text-@Helpers.TransactionStateClass(Model.Transaction)">
        <span data-sensitive>@Helpers.Sats(Model.Transaction.Amount)</span>
        @Model.Transaction.Status
    </h3>
    @if (!Model.Transaction.IsCancelled)
    {
        <h4 class="h4 text-muted">
            @(Model.Transaction.IsExpired ? "Expired" : "Expires")
            @Model.Transaction.ExpiresAt.ToBrowserDate(ViewsRazor.DateDisplayFormat.Relative)
        </h4>
    }

    @if (!Model.Transaction.IsExpired && !Model.Transaction.IsCancelled)
    {
        <div class="payment-box my-4 mx-0">
            <div class="qr-container" data-clipboard="@Model.Transaction.PaymentRequest" id="LNbank-QRContainer">
                @await Component.InvokeAsync("QRCode", new { data = $"lightning:{Model.Transaction.PaymentRequest.ToUpperInvariant()}" })
            </div>
            <div class="input-group mt-3">
                <div class="form-floating">
                    <input id="LNbank-Transaction_PaymentRequest" asp-for="Transaction.PaymentRequest" class="form-control-plaintext" readonly="readonly">
                    <label for="LNbank-Transaction_PaymentRequest" asp-for="Transaction.PaymentRequest">Lightning</label>
                </div>
                <button type="button" class="btn btn-link" data-clipboard-target="#LNbank-Transaction_PaymentRequest">
                    @await Component.InvokeAsync("Icon", new { symbol = "copy" })
                </button>
            </div>
            <div class="input-group mt-3">
                <div class="form-floating">
                    <input id="LNbank-Transaction_ShareUrl" class="form-control-plaintext" readonly="readonly" value="@publicShareUrl">
                    <label for="LNbank-Transaction_ShareUrl">Public URL</label>
                </div>
                <button type="button" class="btn btn-link" data-clipboard-target="#LNbank-Transaction_ShareUrl" id="LNbank-CopyShareUrl">
                    @await Component.InvokeAsync("Icon", new { symbol = "copy" })
                </button>
            </div>
        </div>

        <script>
            (function () {
                window.LNbank.hubs.push({
                    id: 'transaction',
                    handlers: {
                        'transaction-update': data => {
                            if (data.transactionId === @Safe.Json(Model.Transaction.TransactionId)) {
                                window.location.reload();
                            }
                        }
                    }
                })
            })()
        </script>
    }
}
<dl class="row" id="LNbank-TransactionDetails">
    <dt class="col-sm-3 col-xl-2">
        @Html.DisplayNameFor(model => model.Transaction.Description)
    </dt>
    <dd class="col-sm-9 col-xl-10 d-inline-flex align-items-center gap-2">
        @if (!string.IsNullOrEmpty(Model.Transaction.Description))
        {
            <span id="LNbank-TransactionDescription">@Model.Transaction.Description</span>
        }
        <a asp-page="./Edit" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@Model.Transaction.TransactionId">Edit</a>
    </dd>
    @if (Model.Transaction.IsPaid || Model.Transaction.IsSettled)
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.PaidAt)
        </dt>
        <dd class="col-sm-9 col-xl-10" id="LNbank-TransactionPaidAt">
            @Model.Transaction.PaidAt?.ToBrowserDate()
        </dd>
    }
    else
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.ExpiresAt)
        </dt>
        <dd class="col-sm-9 col-xl-10" id="LNbank-TransactionPaidAt">
            @Model.Transaction.ExpiresAt.ToBrowserDate()
        </dd>
    }
    @if (!string.IsNullOrEmpty(Model.Transaction.InvoiceId))
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.InvoiceId)
        </dt>
        <dd class="col-sm-9 col-xl-10">
            @await Component.InvokeAsync("TruncateCenter", new { text = Model.Transaction.InvoiceId, classes = "truncate-center-id" })
        </dd>
    }
    @if (Model.WithdrawConfig != null)
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.WithdrawConfigId)
        </dt>
        <dd class="col-sm-9 col-xl-10">
            <a asp-page="/Wallets/WithdrawConfigs" asp-route-walletId="@Model.CurrentWallet.WalletId">
                @Model.WithdrawConfig.Name
            </a>
        </dd>
    }
    @if (!string.IsNullOrEmpty(Model.Transaction.PaymentRequest))
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.PaymentRequest)
        </dt>
        <dd class="col-sm-9 col-xl-10">
            @await Component.InvokeAsync("TruncateCenter", new { text = Model.Transaction.PaymentRequest, classes = "truncate-center-id" })
        </dd>
    }
    @if (!string.IsNullOrEmpty(Model.Transaction.PaymentHash))
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.PaymentHash)
        </dt>
        <dd class="col-sm-9 col-xl-10">
            @await Component.InvokeAsync("TruncateCenter", new { text = Model.Transaction.PaymentHash, classes = "truncate-center-id" })
        </dd>
    }
    @if (!string.IsNullOrEmpty(Model.Transaction.Preimage))
    {
        <dt class="col-sm-3 col-xl-2">
            @Html.DisplayNameFor(model => model.Transaction.Preimage)
        </dt>
        <dd class="col-sm-9 col-xl-10">
            @await Component.InvokeAsync("TruncateCenter", new { text = Model.Transaction.Preimage, classes = "truncate-center-id" })
        </dd>
    }
</dl>

<div permission="@LNbankPolicies.CanManageLNbank">
    <h3 class="mt-5 mb-4">Other options</h3>
    <div class="d-flex flex-wrap gap-3 align-items-center">
        @if (Model.Transaction.CanRevalidate)
        {
            <a asp-page="./Revalidate" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@Model.Transaction.TransactionId" data-bs-toggle="modal" data-bs-target="#ConfirmModal" data-title="Revalidate transaction" data-description="This will revalidate this transaction." data-confirm="Revalidate" data-confirm-input="REVALIDATE" class="btn btn-outline-info">
                Revalidate Transaction
            </a>
        }
        @if (Model.Transaction.IsSoftDeleted)
        {
            <form method="post" asp-controller="Admin" asp-action="RestoreTransaction" asp-route-transactionId="@Model.Transaction.TransactionId">
                <input type="submit" value="Restore transaction" class="btn btn-outline-danger" id="LNbank-RestoreTransaction"/>
            </form>
        }
        else
        {
            <a asp-page="./Delete" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@Model.Transaction.TransactionId" data-bs-toggle="modal" data-bs-target="#ConfirmModal" data-title="Delete transaction" data-description="This will delete this transaction." data-confirm="Delete" data-confirm-input="DELETE" class="btn btn-outline-danger">
                Delete Transaction
            </a>
        }
    </div>
    <partial name="_Confirm" model="@(new ConfirmModel("Delete transaction", "This will delete this transaction. Are you sure?", "Delete"))"/>
</div>
