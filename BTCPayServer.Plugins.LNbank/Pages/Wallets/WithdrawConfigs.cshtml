@page "/plugins/lnbank/wallets/{walletId}/withdraw-configs/{handler?}"
@using BTCPayServer.Plugins.LNbank.Data.Models
@using BTCPayServer.Abstractions.Models
@using BTCPayServer.Plugins.LNbank.Extensions
@using BTCPayServer.Plugins.LNbank.Services.BoltCard
@model BTCPayServer.Plugins.LNbank.Pages.Wallets.WithdrawConfigsModel
@inject BoltCardService BoltCardService

@{
    ViewData.SetActivePage(LNbankNavPages.WalletWithdrawConfigs, $"Withdraw configurations for \"{Model.CurrentWallet.Name}\"", Model.CurrentWallet.WalletId);
    var reuseTypeOptions = new SelectList(typeof(WithdrawConfigReuseType).GetEnumNames().Select(o =>
        new SelectListItem(typeof(WithdrawConfigReuseType).DisplayName(o), o)),
        nameof(SelectListItem.Value), nameof(SelectListItem.Text), Model.WithdrawConfig.ReuseType.ToString());
    var selectedId = Request.Query.ContainsKey("withdrawConfigId") ? Request.Query["withdrawConfigId"].ToString() : null;
}

@section LNbankFoot {
    <partial name="_ValidationScriptsPartial"/>
}

<partial name="_WalletHeader" model="Model.CurrentWallet"/>
<partial name="_Nav" model="Model.CurrentWallet"/>
<partial name="_StatusMessage"/>

<div class="row">
    <div class="col-xxl-constrain">
        <p>Configure LNURL withdraw access to your wallet.</p>

        @if (!ViewContext.ModelState.IsValid)
        {
            <div asp-validation-summary="All" class="text-danger"></div>
        }

        <form method="post" asp-page-handler="add">
            <div class="form-group">
                <label asp-for="WithdrawConfig.Name" class="form-label" data-required></label>
                <input asp-for="WithdrawConfig.Name" class="form-control"/>
                <span asp-validation-for="WithdrawConfig.Name" class="text-danger"></span>
            </div>
            <div class="d-flex flex-wrap gap-4 mb-4">
                <div class="form-group mb-0" style="width:21.5ch;">
                    <label asp-for="WithdrawConfig.ReuseType" class="form-label" data-required></label>
                    <select asp-for="WithdrawConfig.ReuseType" asp-items="@reuseTypeOptions" class="form-select"></select>
                    <span asp-validation-for="WithdrawConfig.ReuseType" class="text-danger"></span>
                </div>
                <div class="form-group mb-0" id="WithdrawConfig-Limit">
                    <label asp-for="WithdrawConfig.Limit" class="form-label"></label>
                    <div class="input-group">
                        <input asp-for="WithdrawConfig.Limit" class="form-control flex-grow-0 text-end hide-number-spin" type="number" aria-describedby="WithdrawConfigLimit-Addon" style="width:15ch;"/>
                        <span class="input-group-text" id="WithdrawConfigLimit-Addon">times</span>
                    </div>
                    <span asp-validation-for="WithdrawConfig.Limit" class="text-danger"></span>
                </div>
                <script>
                    (function () {
                        const toggleLimitGroup = value => {
                            document.getElementById('WithdrawConfig-Limit').classList.toggle('d-none', value === 'Unlimited')
                        }
                        toggleLimitGroup(document.getElementById('WithdrawConfig_ReuseType').value)
                        document.addEventListener('DOMContentLoaded', () => {
                            delegate('change', '#WithdrawConfig_ReuseType', e => toggleLimitGroup(e.target.value))
                        })
                    })()
                </script>
            </div>
            <div class="d-flex flex-wrap gap-4 mb-4">
                <div class="form-group mb-0">
                    <label asp-for="WithdrawConfig.MaxTotal" class="form-label"></label>
                    <div class="input-group">
                        <input asp-for="WithdrawConfig.MaxTotal" class="form-control flex-grow-0 text-end hide-number-spin" type="number" aria-describedby="WithdrawConfigMaxTotal-Addon" style="width:15ch;"/>
                        <span class="input-group-text" id="WithdrawConfigMaxTotal-Addon">sats</span>
                    </div>
                    <span asp-validation-for="WithdrawConfig.MaxTotal" class="text-danger"></span>
                </div>
                <div class="form-group mb-0">
                    <label asp-for="WithdrawConfig.MaxPerUse" class="form-label"></label>
                    <div class="input-group">
                        <input asp-for="WithdrawConfig.MaxPerUse" class="form-control flex-grow-0 text-end hide-number-spin" type="number" aria-describedby="WithdrawConfigMaxPerUse-Addon" style="width:15ch;"/>
                        <span class="input-group-text" id="WithdrawConfigMaxPerUse-Addon">sats</span>
                    </div>
                    <span asp-validation-for="WithdrawConfig.MaxPerUse" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" role="button" class="btn btn-primary" id="LNbank-CreateWithdrawConfig">Create Withdraw Config</button>
            </div>
        </form>

        @if (Model.WithdrawConfigs.Any())
        {
            <div class="table-responsive" id="LNbank-WithdrawConfigs">
                <table class="table table-hover">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Reuse</th>
                        <th>Max total</th>
                        <th>Max per use</th>
                        <th>Bolt Card</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var withdrawConfig in Model.WithdrawConfigs)
                    {
                        var lnurlEndpoint = new Uri(Url.Action("LnurlWithdraw", "Lnurl", new
                        {
                            walletId = Model.CurrentWallet.WalletId,
                            withdrawConfigId = withdrawConfig.WithdrawConfigId
                        }, HttpContext.Request.Scheme, HttpContext.Request.Host.ToString()) ?? string.Empty);
                        var lnurl = LNURL.LNURL.EncodeUri(lnurlEndpoint, "withdrawRequest", true).ToString().Replace("lightning:", "");
                        var lnurlUri = LNURL.LNURL.EncodeUri(lnurlEndpoint, "withdrawRequest", false).ToString();
                        var detailsId = $"LNbank-WithdrawConfig-Details-{withdrawConfig.WithdrawConfigId}";
                        var isActive = selectedId == withdrawConfig.WithdrawConfigId;
                        <tr>
                            <td>@withdrawConfig.Name</td>
                            <td>
                                @if (withdrawConfig.ReuseType == WithdrawConfigReuseType.Unlimited)
                                {
                                    <span>@typeof(WithdrawConfigReuseType).DisplayName(withdrawConfig.ReuseType.ToString())</span>
                                }
                                else
                                {
                                    <span>@withdrawConfig.Limit @typeof(WithdrawConfigReuseType).DisplayName(withdrawConfig.ReuseType.ToString()).ToLowerInvariant()</span>
                                    <span>(@withdrawConfig.GetRemainingUsages() remaining@(withdrawConfig.ReuseType == WithdrawConfigReuseType.Total ? "" : " in interval"))</span>
                                }
                            </td>
                            <td>
                                <div data-sensitive>
                                    @if (withdrawConfig.MaxTotal != null && withdrawConfig.MaxTotal > 0)
                                    {
                                        <span>@Helpers.Sats(withdrawConfig.MaxTotal)</span>
                                        <span>(@Helpers.Sats(withdrawConfig.GetRemainingBalance(true)) remaining)</span>
                                    }
                                    else
                                    {
                                        <span>No limit</span>
                                    }
                                </div>
                            </td>
                            <td>
                                <span data-sensitive>@(withdrawConfig.MaxPerUse != null && withdrawConfig.MaxPerUse > 0 ? Helpers.Sats(withdrawConfig.MaxPerUse) : "No limit")</span>
                            </td>
                            <td>
                                @if (withdrawConfig.BoltCard is null)
                                {
                                    <span class="badge bg-light">Not issued</span>
                                }
                                else
                                {
                                    switch (withdrawConfig.BoltCard?.Status)
                                    {
                                        case BoltCardStatus.PendingActivation:
                                            <span class="badge bg-warning">Needs activation</span>
                                            break;
                                        case BoltCardStatus.Inactive:
                                            <span class="badge bg-light">Inactive</span>
                                            break;
                                        default:
                                            <span class="badge bg-success">Active</span>
                                            break;
                                    }
                                }
                            </td>
                            <td class="text-end">
                                <button type="button" class="btn btn-link p-0 collapsed only-for-js" data-bs-toggle="collapse" data-bs-target="#@detailsId" aria-expanded="@(isActive ? "true" : "false")" aria-controls="@detailsId">
                                    @await Component.InvokeAsync("Icon", new {symbol = "caret-down"})
                                </button>
                            </td>
                        </tr>
                        <tr id="@detailsId" class="collapse@(isActive ? " show" : "")">
                            <td colspan="6" class="border-top-0">
                                <div class="py-3">
                                    <h5 class="mb-3">LNURL Withdraw</h5>
                                    <div class="payment-box mx-0">
                                        <div class="qr-container" data-clipboard="@lnurl">
                                            @await Component.InvokeAsync("QRCode", new { data = $"lightning:{lnurl.ToUpperInvariant()}" })
                                        </div>
                                        <div class="input-group mt-3">
                                            <div class="form-floating">
                                                <input id="@detailsId-LNURL-Bech32" class="form-control-plaintext" readonly="readonly" value="@lnurl">
                                                <label for="@detailsId-LNURL-Bech32">LNURL (Bech32)</label>
                                            </div>
                                            <button type="button" class="btn btn-link" data-clipboard-target="#@detailsId-LNURL-Bech32">
                                                @await Component.InvokeAsync("Icon", new { symbol = "copy" })
                                            </button>
                                        </div>
                                        <div class="input-group mt-3">
                                            <div class="form-floating">
                                                <input id="@detailsId-LNURL-URI" class="form-control-plaintext" readonly="readonly" value="@lnurlUri">
                                                <label for="@detailsId-LNURL-URI">LNURL (URI)</label>
                                            </div>
                                            <button type="button" class="btn btn-link" data-clipboard-target="#@detailsId-LNURL-URI">
                                                @await Component.InvokeAsync("Icon", new { symbol = "copy" })
                                            </button>
                                        </div>
                                    </div>
                                    <h5 class="mt-5 mb-3">Bolt Card</h5>
                                    <p>
                                        Use the Bolt Card Writer App from the
                                        <a href="https://apps.apple.com/us/app/boltcard-nfc-programmer/id6450968873" target="_blank" rel="noreferrer noopener">Apple App Store</a> or
                                        <a href="https://play.google.com/store/apps/details?id=com.lightningnfcapp" target="_blank" rel="noreferrer noopener">Google Play Store</a> to manage your
                                        <a href="https://www.boltcard.org/" target="_blank" rel="noreferrer noopener">Bolt Card</a> keys.
                                    </p>

                                    @if (withdrawConfig.BoltCard is null)
                                    {
                                        <a asp-page-handler="IssueBolt" class="btn btn-primary" asp-route-withdrawConfigId="@withdrawConfig.WithdrawConfigId">Issue Bolt Card</a>
                                    }
                                    else
                                    {
                                        if (withdrawConfig.BoltCard?.Status == BoltCardStatus.PendingActivation)
                                        {
                                            var content = Url.Action("ActivateCard", "BoltCard", new { code = withdrawConfig.BoltCard.BoltCardId }, Request.Scheme);
                                            <h5 class="mb-3">Activate Bolt Card</h5>
                                            <div class="payment-box mx-0">
                                                <div class="qr-container" data-clipboard="@content">
                                                    @await Component.InvokeAsync("QRCode", new { data = content })
                                                </div>
                                                <div class="input-group mt-3">
                                                    <div class="form-floating">
                                                        <input id="@detailsId-Bolt-Uri" class="form-control-plaintext" readonly="readonly" value="@content">
                                                        <label for="@detailsId-Bolt-Uri">Bolt Card Activation Url</label>
                                                    </div>
                                                    <button type="button" class="btn btn-link" data-clipboard-target="#@detailsId-Bolt-Uri">
                                                        @await Component.InvokeAsync("Icon", new { symbol = "copy" })
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <h5 class="mb-3">Reactivate Bolt Card</h5>
                                            <p>This will clear the card identifier and counter, meaning it can also be configured on a new card (you can always wipe the old card).</p>
                                            <a asp-page-handler="ReactivateBolt" asp-route-withdrawConfigId="@withdrawConfig.WithdrawConfigId" class="btn btn-primary">Reactivate</a>
                                        }
                                        @if (withdrawConfig.BoltCard?.Index is not null)
                                        {
                                            var wipeContent = await BoltCardService.GetWipeContent(withdrawConfig.BoltCard.Index.Value, withdrawConfig.BoltCard.CardIdentifier);
                                            <h5 class="mb-3 mt-5">Wipe Bolt Card</h5>
                                            <div class="payment-box mx-0">
                                                <div class="qr-container" data-clipboard="@wipeContent">
                                                    @await Component.InvokeAsync("QRCode", new { data = wipeContent })
                                                </div>
                                                <div class="input-group mt-3">
                                                    <div class="form-floating">
                                                        <input id="@detailsId-Bolt-Wipe-Json" class="form-control-plaintext" readonly="readonly" value="@wipeContent">
                                                        <label for="@detailsId-Bolt-Wipe-Json">Bolt Card Wipe JSON</label>
                                                    </div>
                                                    <button type="button" class="btn btn-link" data-clipboard-target="#@detailsId-Bolt-Wipe-Json">
                                                        @await Component.InvokeAsync("Icon", new { symbol = "copy" })
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    }
                                    <div class="mt-5">
                                        <a asp-page-handler="remove" class="btn btn-sm btn-outline-danger" asp-route-withdrawConfigId="@withdrawConfig.WithdrawConfigId" data-bs-toggle="modal" data-bs-target="#ConfirmModal" data-description="This action will remove the withdraw configuration <strong>@withdrawConfig.Name</strong> from this wallet." data-confirm-input="REMOVE">Remove Withdraw Config</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p id="LNbank-WithdrawConfigs" class="mt-4 text-secondary">There are no withdraw configurations yet.</p>
        }
    </div>
</div>

<partial name="_Confirm" model="@(new ConfirmModel("Remove withdraw configuration", "This action will remove the withdraw configuration from this wallet. Are you sure?", "Remove"))"/>
