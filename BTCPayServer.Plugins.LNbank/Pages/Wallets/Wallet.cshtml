@page "/plugins/lnbank/wallets/{walletId}"
@using BTCPayServer.Lightning
@using BTCPayServer.Plugins.LNbank.Authentication
@using BTCPayServer.Plugins.LNbank.Data.Models
@using BTCPayServer.Abstractions.Models
@using BTCPayServer.Plugins.LNbank.Services.Wallets
@inject BTCPayServer.Abstractions.Services.Safe Safe
@inject WalletService WalletService
@model BTCPayServer.Plugins.LNbank.Pages.Wallets.WalletModel

@{
    ViewData.SetActivePage(LNbankNavPages.Wallet, Model.CurrentWallet.Name, Model.CurrentWallet.WalletId);
    var balance = await WalletService.GetBalance(Model.CurrentWallet);
}

@section LNbankHead {
    @if (Model.HistogramData != null)
    {
        <link rel="stylesheet" href="~/vendor/chartist/chartist.css" asp-append-version="true">
        <script src="~/vendor/chartist/chartist.min.js" asp-append-version="true"></script>
    }
}

@functions
{
    private string Tooltip(Transaction transaction)
    {
        var tt = transaction.IsSettled ? "" : "Awaiting settlement. ";
        if (transaction.HasRoutingFee) tt += $"Includes {Helpers.Millisats(transaction.RoutingFee)} routing fee.";
        return string.IsNullOrEmpty(tt) ? null : tt;
    }
}

<partial name="_WalletHeader" model="Model.CurrentWallet"/>
<partial name="_StatusMessage"/>

@if (Model.WithdrawConfig != null)
{
    <h4 class="mb-4">Transactions for Withdraw Config "@Model.WithdrawConfig.Name"</h4>
}
else if (Model.HistogramData != null)
{
    <div id="LNbankWalletBalance-@Model.CurrentWallet.WalletId" class="widget lnbank-wallet-balance">
        <div class="d-flex gap-3 align-items-center justify-content-between mb-2">
            <h6>Wallet Balance</h6>
        </div>
        <header class="mb-3">
            @if (balance != null)
            {
                <div class="balance d-flex align-items-baseline gap-1">
                    <h3 class="d-inline-block me-1" data-balance="@balance" data-sensitive>@Helpers.Sats(balance, false)</h3>
                    <span class="text-secondary fw-semibold currency">sats</span>
                </div>
            }
            <div class="btn-group only-for-js mt-1" role="group" aria-label="Period">
                <input type="radio" class="btn-check" name="LNbankWalletBalancePeriod-@Model.CurrentWallet.WalletId" id="LNbankWalletBalancePeriodWeek-@Model.CurrentWallet.WalletId" value="@HistogramType.Week" @(Model.HistogramData.Type == HistogramType.Week ? "checked" : "")>
                <label class="btn btn-link" for="LNbankWalletBalancePeriodWeek-@Model.CurrentWallet.WalletId">1W</label>
                <input type="radio" class="btn-check" name="LNbankWalletBalancePeriod-@Model.CurrentWallet.WalletId" id="LNbankWalletBalancePeriodMonth-@Model.CurrentWallet.WalletId" value="@HistogramType.Month" @(Model.HistogramData.Type == HistogramType.Month ? "checked" : "")>
                <label class="btn btn-link" for="LNbankWalletBalancePeriodMonth-@Model.CurrentWallet.WalletId">1M</label>
                <input type="radio" class="btn-check" name="LNbankWalletBalancePeriod-@Model.CurrentWallet.WalletId" id="LNbankWalletBalancePeriodYear-@Model.CurrentWallet.WalletId" value="@HistogramType.Year" @(Model.HistogramData.Type == HistogramType.Year ? "checked" : "")>
                <label class="btn btn-link" for="LNbankWalletBalancePeriodYear-@Model.CurrentWallet.WalletId">1Y</label>
            </div>
        </header>
        <div class="ct-chart"></div>
        <script>
            (function () {
                const lnbankWalletId = @Safe.Json(Model.CurrentWallet.WalletId);
                let data = { series: @Safe.Json(Model.HistogramData.Series), labels: @Safe.Json(Model.HistogramData.Labels) };

                const id = `LNbankWalletBalance-${lnbankWalletId}`;
                const baseUrl = @Safe.Json(Url.Action("Histogram", "Wallets", new { walletId = Model.CurrentWallet.WalletId, type = HistogramType.Week }));
                const chartOpts = {
                    fullWidth: true,
                    showArea: true
                };

                const render = data => {
                    let { series, labels } = data;
                    if (!series) return;

                    const min = Math.min(...series);
                    const max = Math.max(...series);
                    const low = Math.max(min - ((max - min) / 5), 0);
                    const renderOpts = Object.assign({}, chartOpts, { low });
                    const chart = new Chartist.Line(`#${id} .ct-chart`, {
                        labels,
                        series: [series]
                    }, renderOpts);

                    // prevent y-axis labels from getting cut off
                    window.setTimeout(() => {
                        const yLabels = [...document.querySelectorAll('.ct-label.ct-vertical.ct-start')];
                        if (yLabels) {
                            const width = Math.max(...(yLabels.map(l => l.innerText.length * 7.5)));
                            const opts = Object.assign({}, renderOpts, {
                                axisY: Object.assign({}, renderOpts.axisY, { offset: width })
                            });
                            chart.update(null, opts);
                        }
                    }, 0)
                };

                const update = async type => {
                    const url = baseUrl.replace(/\/week$/gi, `/${type}`);
                    const response = await fetch(url);
                    if (response.ok) {
                        data = await response.json();
                        render(data);
                    }
                };

                render(data);

                document.addEventListener('DOMContentLoaded', () => {
                    delegate('change', `#${id} [name="LNbankWalletBalancePeriod-${lnbankWalletId}"]`, async e => {
                        const type = e.target.value;
                        await update(type);
                    });
                });
            })();
        </script>
    </div>
}

@if (Model.Transactions.Any())
{
    <div class="row">
        <div class="col table-responsive-md">
            <table class="table table-hover">
                <thead>
                <tr>
                    <th class="w-150px">
                        <div class="d-flex align-items-center gap-1">
                            Date
                            <button type="button" class="btn btn-link p-0 fa fa-clock-o switch-time-format" title="Switch date format" data-mode="relative"></button>
                        </div>
                    </th>
                    <th>Description</th>
                    <th class="text-end">Amount</th>
                    <th class="text-end">Settled</th>
                    <th class="text-end" permission="@LNbankPolicies.CanManageLNbank">Actions</th>
                </tr>
                </thead>
                <tbody id="LNbank-WalletTransactions">
                @foreach (var transaction in Model.Transactions)
                {
                    <tr id="LNbank-Transaction-@transaction.TransactionId">
                        <td>
                            <a asp-page="/Transactions/Details" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@transaction.TransactionId" class="transaction-details">
                                @transaction.CreatedAt.ToBrowserDate(ViewsRazor.DateDisplayFormat.Relative)
                            </a>
                        </td>
                        <td>
                            <div class="d-inline-flex align-items-center gap-2">
                                @if (!string.IsNullOrEmpty(transaction.WithdrawConfigId))
                                {
                                    <a asp-page="/Wallets/WithdrawConfigs" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-fragment="WithdrawConfig-@transaction.WithdrawConfigId" data-bs-toggle="tooltip" title="Via withdraw configuration">
                                        <vc:icon symbol="pull-payments"/>
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(transaction.Description))
                                {
                                    <span class="transaction-description text-break">@transaction.Description</span>
                                }
                                <a asp-page="/Transactions/Edit" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@transaction.TransactionId" class="transaction-edit">
                                    Edit
                                </a>
                            </div>
                        </td>
                        <td class="text-nowrap text-end transaction-amount" data-amount="@transaction.Amount.ToUnit(LightMoneyUnit.MilliSatoshi)">
                            <span data-sensitive>@Helpers.Sats(transaction.Amount)</span>
                        </td>
                        <td class="text-nowrap text-end">
                            @if (transaction.IsPaid || transaction.IsSettled || transaction.IsPending)
                            {
                                <span class="text-@Helpers.TransactionStateClass(transaction) transaction-@(transaction.Status.ToLower())" data-sensitive data-amount-settled="@transaction.AmountSettled.ToUnit(LightMoneyUnit.MilliSatoshi)" data-transaction-fee="@transaction.RoutingFee?.ToUnit(LightMoneyUnit.MilliSatoshi)" data-bs-toggle="tooltip" data-bs-placement="left" title="@Tooltip(transaction)">
                                    @Helpers.Sats(transaction.AmountSettled)
                                </span>
                                @if (transaction.IsPending)
                                {
                                    <span class="text-@Helpers.TransactionStateClass(transaction) transaction-status">
                                        @transaction.Status
                                    </span>
                                }
                            }
                            else
                            {
                                <span class="text-@Helpers.TransactionStateClass(transaction) transaction-status">
                                    @transaction.Status
                                </span>
                            }
                        </td>
                        <td class="text-end" permission="@LNbankPolicies.CanManageLNbank">
                            @if (transaction.CanRevalidate)
                            {
                                <a asp-page="/Transactions/Revalidate" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@transaction.TransactionId" data-bs-toggle="modal" data-bs-target="#ConfirmModal" data-title="Revalidate transaction" data-description="This will revalidate this transaction." data-confirm="Revalidate" data-confirm-input="REVALIDATE" class="transaction-revalidate text-info">
                                    Revalidate
                                </a>
                                <span>-</span>
                            }
                            <a asp-page="/Transactions/Delete" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-transactionId="@transaction.TransactionId" data-bs-toggle="modal" data-bs-target="#ConfirmModal" data-title="Delete transaction" data-description="This will delete this transaction." data-confirm="Delete" data-confirm-input="DELETE" class="transaction-delete text-danger">
                                Delete
                            </a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <script>
        (function () {
            const walletId = @Safe.Json(Model.CurrentWallet.WalletId);
            window.LNbank.hubs.push({
                id: 'transaction',
                handlers: {
                    'transaction-update': data => {
                        if (data.walletId === walletId) {
                            window.location.reload();
                        }
                    }
                }
            })
        })()
    </script>

    <a class="btn btn-secondary dropdown-toggle mt-4 ms-auto" href="#" role="button" id="ExportDropdownToggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Export
    </a>
    <div class="dropdown-menu" aria-labelledby="ExportDropdownToggle">
        <a asp-controller="Export" asp-action="Export" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-format="csv" class="dropdown-item export-link" target="_blank">CSV</a>
        <a asp-controller="Export" asp-action="Export" asp-route-walletId="@Model.CurrentWallet.WalletId" asp-route-format="json" class="dropdown-item export-link" target="_blank">JSON</a>
    </div>
}
else
{
    <p id="LNbank-WalletTransactions" class="text-secondary">There are no transactions yet.</p>
}

<partial name="_Confirm" model="@(new ConfirmModel("Delete transaction", "This will delete this transaction. Are you sure?", "Delete"))" />
